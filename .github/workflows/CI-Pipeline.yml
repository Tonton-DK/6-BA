name: Build and deploy action
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  DB_DATABASE: db               # Throwaway integration test database
  DB_USER: root
  DB_PASSWORD: root
  PROJECT_ID: ba-project-349314 # Cloud project
  GKE_CLUSTER: cluster-1        # Cluster name
  GKE_ZONE: europe-north1-a     # Cluster zone
  
jobs:
  unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --nologo --no-restore --verbosity quiet
  
  integration-test-job:
    runs-on: ubuntu-latest
    needs: [unit-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2
      
      - name: Build docker images
        run: docker-compose build
        
      - name: Run docker containers
        run: docker-compose up -d

      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash
          
      - name: Check running containers
        run: docker ps -a

      # smoke testing: https://github.com/peter-evans/smoke-testing
      - name: Perform system healthcheck (smoke test)
        run: bash ./Pipeline/Scripts/health-test.sh Services
        
      - name: Perform system healthcheck (integration test)
        run: bash ./Pipeline/Scripts/health-test.sh ServiceFlow

      - name: Stop docker containers
        if: always()
        run: docker-compose down
  
  build-and-deploy-frontend-image:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}
      
      - name: Build and push frontend image to registry
        run: docker buildx build --push --file Frontend/Dockerfile --tag ghcr.io/antje12/ba/frontend:GA-${{ github.sha }} .

  build-and-deploy-user-images:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}

      - name: Build and push user-database image to registry
        run: docker buildx build --push --tag ghcr.io/antje12/ba/user-database:GA-${{ github.sha }} ./UserService/Database/

      - name: Build and push user-service image to registry
        run: docker buildx build --push --file UserService/Dockerfile --tag ghcr.io/antje12/ba/user-service:GA-${{ github.sha }} .
  
  build-and-deploy-job-images:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}
      
      - name: Build and push job-database image to registry
        run: docker buildx build --push --tag ghcr.io/antje12/ba/job-database:GA-${{ github.sha }} ./JobService/Database/

      - name: Build and push job-service image to registry
        run: docker buildx build --push --file JobService/Dockerfile --tag ghcr.io/antje12/ba/job-service:GA-${{ github.sha }} .

  build-and-deploy-offer-images:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}

      - name: Build and push offer-database image to registry
        run: docker buildx build --push --tag ghcr.io/antje12/ba/offer-database:GA-${{ github.sha }} ./OfferService/Database/

      - name: Build and push offer-service image to registry
        run: docker buildx build --push --file OfferService/Dockerfile --tag ghcr.io/antje12/ba/offer-service:GA-${{ github.sha }} .

  build-and-deploy-contract-images:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}
      
      - name: Build and push contract-database image to registry
        run: docker buildx build --push --tag ghcr.io/antje12/ba/contract-database:GA-${{ github.sha }} ./ContractService/Database/

      - name: Build and push contract-service image to registry
        run: docker buildx build --push --file ContractService/Dockerfile --tag ghcr.io/antje12/ba/contract-service:GA-${{ github.sha }} .

  build-and-deploy-review-images:
    runs-on: ubuntu-latest
    needs: [integration-test-job]
    steps:
      - name: Checkout code base
        uses: actions/checkout@v2

      - name: Login to container registry
        run: docker login https://ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_KEY }}
      
      - name: Build and push review-database image to registry
        run: docker buildx build --push --tag ghcr.io/antje12/ba/review-database:GA-${{ github.sha }} ./ReviewService/Database/

      - name: Build and push review-service image to registry
        run: docker buildx build --push --file ReviewService/Dockerfile --tag ghcr.io/antje12/ba/review-service:GA-${{ github.sha }} .

  google-cloud-deploy:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend-image,build-and-deploy-user-images,build-and-deploy-job-images,build-and-deploy-offer-images,build-and-deploy-contract-images,build-and-deploy-review-images]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ba-project-349314
      
      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      # Use new tags
      - name: Change frontend deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-frontend.yml
      - name: Change user deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-user.yml
      - name: Change job deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-job.yml
      - name: Change offer deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-offer.yml
      - name: Change contract deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-contract.yml
      - name: Change review deploy file tags
        run: sed -i "s+{IMG_TAG}+GA-${{ github.sha }}+g" Pipeline/Kubernetes/deploy-review.yml
      
      # Deploy the Docker image to the GKE cluster
      - name: Deploy Kubernetes
        run: |
          kubectl apply \
            -f Pipeline/Kubernetes/deploy-frontend.yml \
            -f Pipeline/Kubernetes/deploy-user.yml \
            -f Pipeline/Kubernetes/deploy-job.yml \
            -f Pipeline/Kubernetes/deploy-offer.yml \
            -f Pipeline/Kubernetes/deploy-contract.yml \
            -f Pipeline/Kubernetes/deploy-review.yml \
            -f Pipeline/Kubernetes/deploy-metric-server.yaml \
